'''
На вход алгоритма подается четырёхзначное число N из двух чётных и двух нечётных цифр без нулей. Далее оно обрабатывается по следующему алгоритму:

Складываются четные цифры.
Складываются нечетные цифры.
Полученные суммы записываются друг за другом: сначала сумма чётных цифр, затем сумма нечётных.
В результате получается число 46. Какое минимальное число N могло быть на входе алгоритма?
'''
def f(N):
    s_ch = 0
    s_n = 0
    for i in str(N):
        if int(i) % 2 == 0:
            s_ch += int(i)
        else:
            s_n += int(i)

    return int(str(s_ch) + str(s_n))

for N in range(1111, 1000000): # without '0' an lem == 4
    if f(N) == 46:
        print(N)
        break
#1225


'''
Автомат получает на вход пятизначное число. По этому числу строится новое число по таким правилам:
Складываются квадраты цифр, стоящих на нечетных позициях;
Складываются квадраты цифр, стоящих на четных позициях;
Затем в порядке возрастания записываются эти суммы.

Укажите наибольшее число, при вводе которого автомат выдает число 61100  .
Пример. Дано число 12345.   Алгоритм работает следующим образом:

11 + 32 + 52 = 35  ;
 2   2
2 + 4 = 20  ;
Полученное число — 2035  .
'''
def f(N):
    N = str(N)
    s_n = int(N[0])**2 + int(N[2])**2 + int(N[4])**2
    s_ch = int(N[1])**2 + int(N[3])**2
    if s_ch < s_n:
        return int(str(s_ch) + str(s_n))
    else:
        return int(str(s_n) + str(s_ch))
print(f(12345))

for N in range(10000, 99999): #  len ==5
    if f(N) == 61100 :
        print(N)
#86650

'''
(Досрочный ЕГЭ-2023) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом:
1. Строится двоичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
  а) если N делится на 3, то в конец этой записи дописывается три последние цифры двоичной записи.
  б) если N не делится на 3, то остаток при делении на 3 числа N умножается на 3, переводится в двоичную запись и дописывается в конец двоичной записи числа N.
3. Полученная таким образом запись является двоичной записью искомого числа R.

Например, для исходного числа 12  результатом является число  100 в десятичной, а для исходного числа 4 результатом является число19 в дес.
Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число R, не меньшее 120. В ответе запишите это число в десятичной системе счисления.
'''
def f(N):

    R = 0
    D = int(bin(N)[2:])
    if N % 3 == 0:
        R = str(D) + str(D % 1000) # print(int(k[2:]) % 100)
    else:
        R = str(D) + bin((N % 3) * 3)[2:]

    return int(R, 2)

#print(f(4))

for N in range(1000):
    if f(N) > 119:
        print(N)
        break

#15

'''
Автомат обрабатывает натуральное число N по следующему алгоритму:
1. Строится двоичная запись числа N.
2. Если N четное, то в конец полученной записи (справа) дописывается 0, в начало – 1; если N – нечётное в конец и начало дописывается по две единицы.
3. Результат переводится в десятичную систему и выводится на экран.
Пример. Дано число N = 13. Алгоритм работает следующим образом:
1. Двоичная запись числа N: 1101.
2. Число нечетное, следовательно по две единицы по краям – 11110111.
3. На экран выводится число 247.
Укажите наименьшее число, большее 52, которое может являться результатом работы автомата.

'''


def f(N):
    n = int(bin(N)[2:])
    if N % 2 == 0:
        res = '1' + str(n) + '0'
    else:
        res = '11' + str(n) + '11'

    return int(res, 2)

print(f(13))
for N in range(1000):
    if f(N) > 52:
        print(N)
        break
#3

'''
Автомат обрабатывает натуральное число N по следующему алгоритму:
1.  Строится двоичная запись числа N.
2. К полученной записи дописываются разряды. Если число четное справа дописывается 10, если число нечетное – слева дописывается 1 и справа 01.
3.  Результат переводится в десятичную систему и выводится на экран.
Пример. Дано число N = 13. Алгоритм работает следующим образом:
1.  Двоичная запись числа N: 1101.
2.  Число нечетное, следовательно слева дописываем 1, справа 01 – 1+1101+01 = 1110101.
3.  На экран выводится число 117.
В результате работы автомата на экране появилось число, большее 516. Для какого наименьшего значения N данная ситуация возможна?
'''



def f(N):
    n = int(bin(N)[2:])
    if N % 2 == 0:
        res =str(n) + '10'
    else:
        res = '1' + str(n) + '01'

    return int(res, 2)

print(f(13))
for N in range(1000):
    if f(N) > 516:
        print(N)
        break
#65

'''
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1. Строится двоичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
а) если сумма цифр в двоичной записи числа чётная, то к этой записи справа дописывается 0, а затем два левых разряда заменяются на 10;
б) если сумма цифр в двоичной записи числа нечётная, то к этой записи справа дописывается 1, а затем два левых разряда заменяются на 11.
Полученная таким образом запись является двоичной записью искомого числа R.
Например, для исходного числа 6 результатом является число 8, а для исходного числа 4 результатом является число 13.
Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 35.
В ответе запишите это число в десятичной системе счисления.
'''


def summa(x):
    s = 0
    for i in str(x):
        s += int(i)
    return int(s)


def f(N):
    r = 0
    n = bin(N)[2:]
    if summa(n) % 2 == 0:
        r = n + '0'
        r  = '10' + r[2:]
    else:
        r = n + '1'
        r = '11' + r[2:]
    return int(r, 2)


for N in range(1000):
    if f(N) < 35:
        print(N)
#24

'''
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1. Строится двоичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
а) если число N делится на 3, то в этой записи дописываются справа три последние двоичные цифры;
б) если число N на 3 не делится, то остаток от деления умножается на 3, переводится в двоичную запись и дописывается в конец числа.
Полученная таким образом запись является двоичной записью искомого числа R.
3. Результат переводится в десятичную систему и выводится на экран.
Например, для исходного числа 12 результатом является число 100, а для исходного числа 4 результатом является число  19.
Укажите максимальное число R, не превышающее 170, которое может быть получено с помощью описанного алгоритма.
В ответе запишите это число в десятичной системе счисления.
'''


def f(N):
    r = 0
    n = bin(N)[2:]
    if N % 3 == 0:
        r = n + n[-3:]
    else:
        r = n + bin((N % 3) * 3)[2:]

    return int(r, 2)

print(f(4))
for N in range(1000):
    if f(N) < 170:
        print(f(N))
#163

'''
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1. Строится двоичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
а) если число кратно 3, тогда в конец дописывается три младших разряда полученной двоичной записи,
б) если число не кратно 3, тогда в конец дописывается двоичная последовательность, являющаяся результатом умножения 3 на остаток от деления числа N на 3.
Полученная таким образом запись является двоичной записью искомого числа R.
Например, для исходного числа 5результатом является число 46, а для исходного числа 9 результатом является число 73.
Укажите наибольшее число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 100. В ответе запишите это число в десятичной системе счисления.
'''


def f(N):
    r = 0
    n = bin(N)[2:]
    if N % 3 == 0:
        r = n + n[-3:]
    else:
        r = n + bin((N % 3) * 3)[2:]

    return int(r, 2)

print(f(5))
for N in range(1000):
    if f(N) < 100:
        print(f(N))
# 91

'''
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1. Строится троичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
а) если число N делится на 3, то к этой записи дописываются две последние троичные цифры;
б) если число N на 3 не делится, то остаток от деления умножается на 5, переводится в троичную запись и дописывается в конец числа.
Полученная таким образом запись является троичной записью искомого числа R.
3. Результат переводится в десятичную систему и выводится на экран.

Например, для исходного числа 11 результатом является число 307, а для исходного числа 12 это число 111.
Укажите минимальное число R, большее 133, которое может быть получено с помощью описанного алгоритма. В ответе запишите это число в десятичной системе счисления.
'''


def num(x, base=3):
    res = ''
    while x > 0:
        res += str(x % base)
        x = x // base
    return res[::-1]


def f(N):
    r = ''
    n = num(N)
    if N % 3 == 0:
        r = n + n[-2:]
    else:
        ost = N % 3
        r = n + num(ost * 5)

    return int(r, 3)


for N in range(1,1000):
    if f(N) > 133:
        print(f(N))
        break
# 145

"""
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1. Строится троичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
а) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
6) если число N на 3 не делится, то остаток от деления на 3 умножается на 4, переводится в троичную запись и дописывается в конец числа.
Полученная таким образом запись является троичной записью искомого числа R.
3. Результат переводится в десятичную систему и выводится на экран.
Например, для исходного числа 11  результатом является число 107, а для исходного числа 12 это число 353.
Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 199.
"""


def num(x, base=3):
    res = ''
    while x > 0:
        res += str(x % base)
        x = x // base
    return res[::-1]


def f(N):
    r = ''
    n = num(N)
    if N % 3 == 0:
        r = '1' + n + '02'
    else:
        ost = N % 3
        r = n + num(ost * 4)

    return int(r, 3)


print(f(12))

for N in range(1, 1000):
    if f(N) < 199:
        print(N)
# 20


def perev(x, base):
    ans = ''
    x = int(x)
    while x != 0:
        ans += str(x%base)
        x //= base
    return ans[::-1]


def f(n):
    x = bin(n)[2:]
    if n%2 == 0:
        x = '10' + x
    else:
        x = '1' + x + '01'

    return int(x, 2)

for n in range(200):
    if f(n) > 516:
        print(n)

def perev(x, base):
    ans = ''
    x = int(x)
    while x != 0:
        ans += str(x%base)
        x //= base
    return ans[::-1]


def f(n):
    x = bin(n)[2:]
    if n%3 == 0:
        x = x.replace('0', '1')
    else:
        x = x.replace('1', '10')

    return int(x, 2)
lst = []
for n in range(200):
    if f(n) <= 161:
        lst.append(f(n))
print(max(lst))

def summa(x):
    ans = 0
    x = str(x)
    while x != '':
        ans += int(x[-1])
        x = x[:-1]
    return ans


def f(n):
    x = bin(n)[2:]
    if summa(x) % 2 == 0:
        x = '11' + x[2:] + '0'
    else:
        x = '10' + x[2:] + '1'

    return int(x, 2)


lst = []
for n in range(50):
    lst.append(f(n))
print(max(lst))


def perev(x, base):
    ans = ''
    x = int(x)
    while x != 0:
        ans += str(x%base)
        x //= base
    return ans[::-1]


def summa(x):
    ans = 0
    x = str(x)
    while x != '':
        ans += int(x[-1])
        x = x[:-1]
    return ans


def f(n):
    x = perev(n, 3)
    if n % 7 == 0:
        x = x + x[-2:]
    else:
        ost = n%7 * 3
        x = x + perev(ost, 3)

    return int(x, 3)


lst = []
for n in range(1, 1200):
    if f(n) > 369:
        lst.append(f(n))
print(min(lst))

