# добавить в кучу один камень или
# добавить в кучу два камня или
# увеличить количество камней в куче в два раза.
# 1 ≤ S ≤ 37.
# 19.Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.
# 20.Найдите три таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
# — Петя не может выиграть за один ход;
# — Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
# Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.
# 21 .Найдите минимальное значение S, при котором одновременно выполняются два условия:
# — у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# — у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.

from functools import lru_cache

def moves(s):
    return [s+1, s+2, s*2]

@lru_cache
def f(s):
    if s > 37:
        return 'end'
    if any([f(s1) == 'end' for s1 in moves(s)]):
        return 'win1'
    if any([f(s1) == 'win1' for s1 in moves(s)]):
        return 'lose1'
    # if any([f(s1) == 'lose1' for s1 in moves(s)]):
    #     return 'win2'
    # if all([f(s1) == 'win2' or f(s1) == 'win1' for s1 in moves(s)]):
    #     return 'lose2'

for s in range(1, 38):
    if f(s) == 'lose1':
        print(s)

#
#20 - 91617
#21 - 15



# добавить в кучу один или три камня или увеличить количество камней в куче в 3
#  при этом после каждого хода в куче должно быть нечетное количество камней
#  1 ≤ S ≤ 62  .
from functools import lru_cache


def moves(s):
    lst =[]
    for el in [s+1, s+3, s*3]:
        if el%2 != 0:
            lst.append(el)
    return lst

@lru_cache
def f(s):
    if s >= 63:
        return 'end'
    if any([f(s1) == 'end' for s1 in moves(s)]):
        return 'win1'
    if any([f(s1) == 'win1' for s1 in moves(s)]):
        return 'lose1'
    # if any([f(s1) == 'lose1' for s1 in moves(s)]):
    #     return 'win2'
    # if all([f(s1) == 'win1' or f(s1) == 'win2' for s1 in moves(s)]):
    #     return 'lose2'


for s in range(1, 63):
    if f(s) == 'lose1':
        print(s)

# 19.Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна. ------------7
# 20.Найдите три таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
# — Петя не может выиграть за один ход;
# — Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
# Найденные значения запишите в ответе в порядке возрастания без разделительных знаков. ------------318
# 21 .Найдите минимальное значение S, при котором одновременно выполняются два условия:
# — у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# — у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом. ---------------1



# добавить в кучу один или три камня или увеличить количество камней в куче в 3
#  при этом после каждого хода в куче должно быть нечетное количество камней
#  1 ≤ S ≤ 62  .
from functools import lru_cache


def moves(s):
    lst =[]
    for el in [s+1, s+3, s*3]:
        if el%2 != 0:
            lst.append(el)
    return lst

@lru_cache
def f(s):
    if s >= 63:
        return 'end'
    if any([f(s1) == 'end' for s1 in moves(s)]):
        return 'win1'
    if any([f(s1) == 'win1' for s1 in moves(s)]):
        return 'lose1'
    # if any([f(s1) == 'lose1' for s1 in moves(s)]):
    #     return 'win2'
    # if all([f(s1) == 'win1' or f(s1) == 'win2' for s1 in moves(s)]):
    #     return 'lose2'


for s in range(1, 63):
    if f(s) == 'lose1':
        print(s)

# 19.Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна. ------------7
# 20.Найдите три таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
# — Петя не может выиграть за один ход;
# — Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
# Найденные значения запишите в ответе в порядке возрастания без разделительных знаков. ------------318
# 21 .Найдите минимальное значение S, при котором одновременно выполняются два условия:
# — у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# — у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом. ---------------1









"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч два камня или увеличить количество камней в куче в три раза. Например, пусть в одной куче будет 6   камней, а в другой 7   камней; такую позицию мы будем обозначать (6,7).   За один ход из позиции (6,7)   можно получить любую из четырёх позиций: (8,7),(6,9),(18,7),(6,21).   Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 63.

Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 63   или более камней. В начальный момент в первой куче было 7   камней, во второй куче S   камней, 1 ≤ S ≤ 55.

Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока — значит описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т. е. не являющиеся выигрышными независимо от игры противника.

19) Найдите минимальное значение S  , при котором Ваня выигрывает своим первым ходом при любой игре Пети.
21)Для игры, описанной ранее, найдите такое значение S,   при котором одновременно выполняются два условия:

– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;

– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.

Если такого значения нет, в ответ запишите 0.
Для игры, описанной в предыдущем задании, найдите количество таких значения S,   при которых у Пети есть выигрышная стратегия, причём Петя не может выиграть за один ход и Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
"""
from functools import lru_cache


def moves(h):
    a, b = h[0], h[1]
    return [(a*3, b), (a, b*3), (a+2, b), (a, b+2)]

@lru_cache(None)
def f(h):
    if sum(h) >= 63:
        return 'end'
    if any([f(h1) == 'end' for h1 in moves(h)]):
        return 'win1'
    if all([f(h1) == 'win1' for h1 in moves(h)]):
        return 'lose1'
    if any([f(h1) == 'lose1' for h1 in moves(h)]):
        return 'win2'
    if all([f(h1) == 'win1' or f(h1) == 'win2' for h1 in moves(h)]):
        return 'lose2'

for s in range(1,56):
    h = (7, s)
    if f(h) == 'lose2':
        print('21', s)
    if f(h) == 'win2':
        print('20', s)
    if f(h) == 'lose1':
        print('19', s)
# 19 - 18
# 20 - 6 and 16 - 2
# 21 - 17




'''
 в кучу один камень или увеличить количество камней в куче в два раза. 
 1 ≤ S ≤ 184  .
Укажите такое значение S  , при котором Петя не может выиграть за один ход,
 но при любом ходе Пети Ваня может выиграть своим первым ходом.
 Найдите два таких значения S  , при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:

— Петя не может выиграть за один ход;

— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.

Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.
'''
from functools import lru_cache


def moves(s):
    return [s+1, 2*s]
@lru_cache
def f(s):
    if s >= 185:
        return 'end'
    if any([f(s1) == 'end' for s1 in moves(s)]):
        return 'win1'
    if all([f(s1) == 'win1' for s1 in moves(s)]):
        return 'lose1'
    if any([f(s1) == 'lose1' for s1 in moves(s)]):
        return 'win2'
    if all([f(s1) == 'win2' or f(s1) == 'win1' for s1 in moves(s)]):
        return 'lose2'


for s in range(1, 185):
    if f(s) == 'lose2':
        print(s)

from functools import lru_cache


def moves(s):
    return [s+1, s+4, s*3]

@lru_cache
def f(s):
    if s >= 88:
        return 'end'
    if any([f(x) == 'end' for x in moves(s)]):
        return 'win1'
    if all([f(x) == 'win1' for x in moves(s)]):
        return 'lose1'
    if any([f(x) == 'lose1' for x in moves(s)]):
        return 'win2'


for s in range(1, 88):
    if f(s) == 'win2':
        print(s)
