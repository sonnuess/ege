bin(n)- 2
oct(n) - 8
hex(n) - 16
int(n, base) - 10
set() - оставляет только уникальные значения
.count() - подсчет чего-либо
###   если система счисления больше 36, то переводим вручную через степени справа налево с нуля
если нужно проверить разбиение 4 элементов на равные суммы: отсортируй и сложи 1 с 4 и 2 с 3 (порядковые номера)

def is_prime(x):
    for i in range(2, round(x**0.5) + 1):
        if x % i == 0:
            return False
    return True

нетривиальные делители - не единица и не само число
к 23: нечетное колво делителей - проверить, можно ли выделить целый корень из числа

#   проверка на целое число: if (x**0.5)%1 == 0:

@lru_cache - декоратор для рекурсивных функций


        сумма цифр
def summa(x):
    s = 0
    for i in str(x):
        s += int(i)
    return int(s)


        перевод из любой СС
def num(x, base):
    new = ''
    while x > 0:
        res = x % base
        new = str(res) + new
        x = x // base
    return str(new)


        нетривиальные делители - списком
def divisions(x):
    lst = []
    x = int(x)
    for d in range(2, round(x**0.5) + 1):
        if x % d == 0:
            lst.append(d)
        if x // d != d and x % (x // d) == 0:
            lst.append(x//d)
    return list(set(lst))